<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Customer', 'doctrine');

/**
 * BaseCustomer
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $customer_id
 * @property timestamp $reg_date
 * @property string $person_code
 * @property string $name
 * @property string $sur_name
 * @property string $mobile
 * @property integer $zone_id
 * @property integer $area_id
 * @property timestamp $reg_expiry
 * @property string $address
 * @property Zones $Zones
 * @property Areas $Areas
 * @property Doctrine_Collection $Complaints
 * @property Doctrine_Collection $CustRegItems
 * 
 * @method integer             getCustomerId()   Returns the current record's "customer_id" value
 * @method timestamp           getRegDate()      Returns the current record's "reg_date" value
 * @method string              getPersonCode()   Returns the current record's "person_code" value
 * @method string              getName()         Returns the current record's "name" value
 * @method string              getSurName()      Returns the current record's "sur_name" value
 * @method string              getMobile()       Returns the current record's "mobile" value
 * @method integer             getZoneId()       Returns the current record's "zone_id" value
 * @method integer             getAreaId()       Returns the current record's "area_id" value
 * @method timestamp           getRegExpiry()    Returns the current record's "reg_expiry" value
 * @method string              getAddress()      Returns the current record's "address" value
 * @method Zones               getZones()        Returns the current record's "Zones" value
 * @method Areas               getAreas()        Returns the current record's "Areas" value
 * @method Doctrine_Collection getComplaints()   Returns the current record's "Complaints" collection
 * @method Doctrine_Collection getCustRegItems() Returns the current record's "CustRegItems" collection
 * @method Customer            setCustomerId()   Sets the current record's "customer_id" value
 * @method Customer            setRegDate()      Sets the current record's "reg_date" value
 * @method Customer            setPersonCode()   Sets the current record's "person_code" value
 * @method Customer            setName()         Sets the current record's "name" value
 * @method Customer            setSurName()      Sets the current record's "sur_name" value
 * @method Customer            setMobile()       Sets the current record's "mobile" value
 * @method Customer            setZoneId()       Sets the current record's "zone_id" value
 * @method Customer            setAreaId()       Sets the current record's "area_id" value
 * @method Customer            setRegExpiry()    Sets the current record's "reg_expiry" value
 * @method Customer            setAddress()      Sets the current record's "address" value
 * @method Customer            setZones()        Sets the current record's "Zones" value
 * @method Customer            setAreas()        Sets the current record's "Areas" value
 * @method Customer            setComplaints()   Sets the current record's "Complaints" collection
 * @method Customer            setCustRegItems() Sets the current record's "CustRegItems" collection
 * 
 * @package    uss
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseCustomer extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('customer');
        $this->hasColumn('customer_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('reg_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '25',
             ));
        $this->hasColumn('person_code', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '30',
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '100',
             ));
        $this->hasColumn('sur_name', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '100',
             ));
        $this->hasColumn('mobile', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '10',
             ));
        $this->hasColumn('zone_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '4',
             ));
        $this->hasColumn('area_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '4',
             ));
        $this->hasColumn('reg_expiry', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '25',
             ));
        $this->hasColumn('address', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Zones', array(
             'local' => 'zone_id',
             'foreign' => 'zone_id'));

        $this->hasOne('Areas', array(
             'local' => 'area_id',
             'foreign' => 'area_id'));

        $this->hasMany('Complaints', array(
             'local' => 'customer_id',
             'foreign' => 'customer_id'));

        $this->hasMany('CustRegItems', array(
             'local' => 'customer_id',
             'foreign' => 'customer_id'));
    }
}