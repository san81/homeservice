<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('CustRegItems', 'doctrine');

/**
 * BaseCustRegItems
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $customer_id
 * @property integer $item_id
 * @property Customer $Customer
 * @property Items $Items
 * 
 * @method integer      getId()          Returns the current record's "id" value
 * @method integer      getCustomerId()  Returns the current record's "customer_id" value
 * @method integer      getItemId()      Returns the current record's "item_id" value
 * @method Customer     getCustomer()    Returns the current record's "Customer" value
 * @method Items        getItems()       Returns the current record's "Items" value
 * @method CustRegItems setId()          Sets the current record's "id" value
 * @method CustRegItems setCustomerId()  Sets the current record's "customer_id" value
 * @method CustRegItems setItemId()      Sets the current record's "item_id" value
 * @method CustRegItems setCustomer()    Sets the current record's "Customer" value
 * @method CustRegItems setItems()       Sets the current record's "Items" value
 * 
 * @package    uss
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseCustRegItems extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('cust_reg_items');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'autoincrement' => true,
             'primary' => true,
             'length' => '8',
             ));
        $this->hasColumn('customer_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '4',
             ));
        $this->hasColumn('item_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '4',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Customer', array(
             'local' => 'customer_id',
             'foreign' => 'customer_id'));

        $this->hasOne('Items', array(
             'local' => 'item_id',
             'foreign' => 'item_id'));
    }
}