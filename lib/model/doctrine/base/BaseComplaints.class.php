<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Complaints', 'doctrine');

/**
 * BaseComplaints
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property timestamp $complaint_date
 * @property string $complaint_code
 * @property integer $customer_id
 * @property integer $assigned_emp_id
 * @property integer $item_id
 * @property string $status
 * @property timestamp $closed_date
 * @property string $description
 * @property Customer $Customer
 * @property Employee $Employee
 * @property Items $Items
 * 
 * @method integer    getId()              Returns the current record's "id" value
 * @method timestamp  getComplaintDate()   Returns the current record's "complaint_date" value
 * @method string     getComplaintCode()   Returns the current record's "complaint_code" value
 * @method integer    getCustomerId()      Returns the current record's "customer_id" value
 * @method integer    getAssignedEmpId()   Returns the current record's "assigned_emp_id" value
 * @method integer    getItemId()          Returns the current record's "item_id" value
 * @method string     getStatus()          Returns the current record's "status" value
 * @method timestamp  getClosedDate()      Returns the current record's "closed_date" value
 * @method string     getDescription()     Returns the current record's "description" value
 * @method Customer   getCustomer()        Returns the current record's "Customer" value
 * @method Employee   getEmployee()        Returns the current record's "Employee" value
 * @method Items      getItems()           Returns the current record's "Items" value
 * @method Complaints setId()              Sets the current record's "id" value
 * @method Complaints setComplaintDate()   Sets the current record's "complaint_date" value
 * @method Complaints setComplaintCode()   Sets the current record's "complaint_code" value
 * @method Complaints setCustomerId()      Sets the current record's "customer_id" value
 * @method Complaints setAssignedEmpId()   Sets the current record's "assigned_emp_id" value
 * @method Complaints setItemId()          Sets the current record's "item_id" value
 * @method Complaints setStatus()          Sets the current record's "status" value
 * @method Complaints setClosedDate()      Sets the current record's "closed_date" value
 * @method Complaints setDescription()     Sets the current record's "description" value
 * @method Complaints setCustomer()        Sets the current record's "Customer" value
 * @method Complaints setEmployee()        Sets the current record's "Employee" value
 * @method Complaints setItems()           Sets the current record's "Items" value
 * 
 * @package    uss
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseComplaints extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('complaints');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('complaint_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '25',
             ));
        $this->hasColumn('complaint_code', 'string', 40, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '40',
             ));
        $this->hasColumn('customer_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '4',
             ));
        $this->hasColumn('assigned_emp_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '4',
             ));
        $this->hasColumn('item_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '4',
             ));
        $this->hasColumn('status', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '20',
             ));
        $this->hasColumn('closed_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '25',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Customer', array(
             'local' => 'customer_id',
             'foreign' => 'customer_id'));

        $this->hasOne('Employee', array(
             'local' => 'assigned_emp_id',
             'foreign' => 'emp_id'));

        $this->hasOne('Items', array(
             'local' => 'item_id',
             'foreign' => 'item_id'));
    }
}